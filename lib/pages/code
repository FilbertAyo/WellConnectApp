import 'package:flutter/material.dart';
import 'package:flutter_map/flutter_map.dart';
import 'package:latlong2/latlong.dart';
import 'package:geolocator/geolocator.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';

class Maps extends StatefulWidget {
  final String? pharmacyLocation; // Define pharmacyLocation as a parameter
  const Maps({Key? key, this.pharmacyLocation}) : super(key: key);

  @override
  State<Maps> createState() => _MapsState();
}

class _MapsState extends State<Maps> {
  LatLng? currentLocation;
  LatLng? destination;
  bool isLoading = false;
  final LatLng source = LatLng(37.773716, -122.233825); // Source point
  final LatLng nextLocation = LatLng(38.504400, -122.578467);

  @override
  void initState() {
    super.initState();
    _getCurrentLocation();
    _fetchDestination(); // Call to get current location on app launch
  }

  Future<bool> _handleLocationPermission() async {
  bool serviceEnabled;
  LocationPermission permission;
  
  serviceEnabled = await Geolocator.isLocationServiceEnabled();
  if (!serviceEnabled) {
    ScaffoldMessenger.of(context).showSnackBar(const SnackBar(
        content: Text('Location services are disabled. Please enable the services')));
    return false;
  }
  permission = await Geolocator.checkPermission();
  if (permission == LocationPermission.denied) {
    permission = await Geolocator.requestPermission();
    if (permission == LocationPermission.denied) {   
      ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Location permissions are denied')));
      return false;
    }
  }
  if (permission == LocationPermission.deniedForever) {
    ScaffoldMessenger.of(context).showSnackBar(const SnackBar(
        content: Text('Location permissions are permanently denied, we cannot request permissions.')));
    return false;
  }
  return true;
}

Future<void> _getCurrentLocation() async {
  final hasPermission = await _handleLocationPermission();
  if (!hasPermission) return;
  try {
  Position position = await Geolocator.getCurrentPosition(
          desiredAccuracy: LocationAccuracy.high);
      setState(() {
        currentLocation = LatLng(position.latitude, position.longitude);
      });
        print(currentLocation);
    } catch (e) {
      print("Error getting location: $e");
    }
}

 Future<void> _fetchDestination() async {
    setState(() {
      isLoading = true; // Set loading indicator
    });

    final String? placeName = widget.pharmacyLocation;

    if (placeName == null) {
      // If pharmacy location not provided, try getting current location
      _getCurrentLocation();
      return;
    }

    final url = Uri.parse(
        "https://nominatim.openstreetmap.org/search?q=$placeName&format=jsonv2");
    final response = await http.get(url);

    setState(() {
      isLoading = false; // Clear loading indicator
    });

    if (response.statusCode == 200) {
      final data = jsonDecode(response.body);
      if (data.isNotEmpty) {
        final firstResult = data[0];
        final double latitude = double.parse(firstResult["lat"]);
        final double longitude = double.parse(firstResult["lon"]);
        setState(() {
          destination = LatLng(latitude, longitude);
        });
      } else {
        print("Place not found by Nominatim");
        print(placeName);
        // You can show a snackbar or dialog to inform the user
      }
    } else {
      print("Error fetching destination: ${response.statusCode}");
    }
  }

  final double zoom = 5.0; // Initial zoom level


  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(
          "Map",
          style: TextStyle(color: Colors.white),
        ),
        backgroundColor: Color(0xff2b4260),
      ),
      body: Stack(
        children: [
          isLoading
              ? Center(child: CircularProgressIndicator())
              : (currentLocation == null)
                  ? Center(child: Text('Finding your location...'))
                  : Container(
                      child: FlutterMap(
                        options: MapOptions(
                          center: currentLocation ?? destination,
                          zoom: zoom,
                        ),
                        children: [
                          TileLayer(
                            urlTemplate:
                                "https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",
                            subdomains: ['a', 'b', 'c'],
                          ),
                  MarkerLayer(
                    markers: [
                      Marker(
                        point: currentLocation!,
                        width: 80.0,
                        height: 80.0,
                        child: Icon(
                          Icons.location_on,
                          color: Colors.blue, // Source marker as blue
                          size: 40.0,
                        ),
                      ),
                      if (destination != null)
                        Marker(
                          point: nextLocation,
                          width: 80.0,
                          height: 80.0,
                          child: Icon(
                            Icons.pin_drop,
                            color: Colors.red, // Destination marker as red
                            size: 40.0,
                          ),
                        ),
                    ],
                  ),
                  PolylineLayer(
                    polylines: [
                      Polyline(
                          points:  [currentLocation!, nextLocation],
                          borderColor: Color(0xff2b4260),
                          borderStrokeWidth: 5 // Connect source and destination
                          ),
                    ],
                  ),
                ],
              ),)
        ]));
  }
}
